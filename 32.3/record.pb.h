// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_INCLUDED_record_2eproto
#define PROTOBUF_INCLUDED_record_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_record_2eproto 

namespace protobuf_record_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_record_2eproto
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
namespace google {
namespace protobuf {
template<> ::Record* Arena::CreateMaybeMessage<::Record>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(NULL);
  }

  Record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type_of_activity = 4;
  bool has_type_of_activity() const;
  void clear_type_of_activity();
  static const int kTypeOfActivityFieldNumber = 4;
  const ::std::string& type_of_activity() const;
  void set_type_of_activity(const ::std::string& value);
  #if LANG_CXX11
  void set_type_of_activity(::std::string&& value);
  #endif
  void set_type_of_activity(const char* value);
  void set_type_of_activity(const char* value, size_t size);
  ::std::string* mutable_type_of_activity();
  ::std::string* release_type_of_activity();
  void set_allocated_type_of_activity(::std::string* type_of_activity);

  // required int32 year = 1;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional bool foreign_economic_activity = 5;
  bool has_foreign_economic_activity() const;
  void clear_foreign_economic_activity();
  static const int kForeignEconomicActivityFieldNumber = 5;
  bool foreign_economic_activity() const;
  void set_foreign_economic_activity(bool value);

  // @@protoc_insertion_point(class_scope:Record)
 private:
  void set_has_year();
  void clear_has_year();
  void set_has_address();
  void clear_has_address();
  void set_has_name();
  void clear_has_name();
  void set_has_type_of_activity();
  void clear_has_type_of_activity();
  void set_has_foreign_economic_activity();
  void clear_has_foreign_economic_activity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_of_activity_;
  ::google::protobuf::int32 year_;
  bool foreign_economic_activity_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// required int32 year = 1;
inline bool Record::has_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_year() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_year() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 Record::year() const {
  // @@protoc_insertion_point(field_get:Record.year)
  return year_;
}
inline void Record::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Record.year)
}

// required string address = 2;
inline bool Record::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Record::address() const {
  // @@protoc_insertion_point(field_get:Record.address)
  return address_.GetNoArena();
}
inline void Record::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.address)
}
#if LANG_CXX11
inline void Record::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Record.address)
}
#endif
inline void Record::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.address)
}
inline void Record::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.address)
}
inline ::std::string* Record::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:Record.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_address() {
  // @@protoc_insertion_point(field_release:Record.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Record.address)
}

// required string name = 3;
inline bool Record::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Record::name() const {
  // @@protoc_insertion_point(field_get:Record.name)
  return name_.GetNoArena();
}
inline void Record::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.name)
}
#if LANG_CXX11
inline void Record::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Record.name)
}
#endif
inline void Record::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.name)
}
inline void Record::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.name)
}
inline ::std::string* Record::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Record.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_name() {
  // @@protoc_insertion_point(field_release:Record.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Record.name)
}

// optional string type_of_activity = 4;
inline bool Record::has_type_of_activity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_type_of_activity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_type_of_activity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_type_of_activity() {
  type_of_activity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_of_activity();
}
inline const ::std::string& Record::type_of_activity() const {
  // @@protoc_insertion_point(field_get:Record.type_of_activity)
  return type_of_activity_.GetNoArena();
}
inline void Record::set_type_of_activity(const ::std::string& value) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.type_of_activity)
}
#if LANG_CXX11
inline void Record::set_type_of_activity(::std::string&& value) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Record.type_of_activity)
}
#endif
inline void Record::set_type_of_activity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.type_of_activity)
}
inline void Record::set_type_of_activity(const char* value, size_t size) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.type_of_activity)
}
inline ::std::string* Record::mutable_type_of_activity() {
  set_has_type_of_activity();
  // @@protoc_insertion_point(field_mutable:Record.type_of_activity)
  return type_of_activity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_type_of_activity() {
  // @@protoc_insertion_point(field_release:Record.type_of_activity)
  if (!has_type_of_activity()) {
    return NULL;
  }
  clear_has_type_of_activity();
  return type_of_activity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_type_of_activity(::std::string* type_of_activity) {
  if (type_of_activity != NULL) {
    set_has_type_of_activity();
  } else {
    clear_has_type_of_activity();
  }
  type_of_activity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_of_activity);
  // @@protoc_insertion_point(field_set_allocated:Record.type_of_activity)
}

// optional bool foreign_economic_activity = 5;
inline bool Record::has_foreign_economic_activity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Record::set_has_foreign_economic_activity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Record::clear_has_foreign_economic_activity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Record::clear_foreign_economic_activity() {
  foreign_economic_activity_ = false;
  clear_has_foreign_economic_activity();
}
inline bool Record::foreign_economic_activity() const {
  // @@protoc_insertion_point(field_get:Record.foreign_economic_activity)
  return foreign_economic_activity_;
}
inline void Record::set_foreign_economic_activity(bool value) {
  set_has_foreign_economic_activity();
  foreign_economic_activity_ = value;
  // @@protoc_insertion_point(field_set:Record.foreign_economic_activity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_record_2eproto
